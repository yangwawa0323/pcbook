package pb

import (
	context "context"
	gorm1 "github.com/infobloxopen/atlas-app-toolkit/gorm"
	errors "github.com/infobloxopen/protoc-gen-gorm/errors"
	gorm "github.com/jinzhu/gorm"
	field_mask "google.golang.org/genproto/protobuf/field_mask"
	strings "strings"
)

type ScreenORM struct {
	LaptopId   *string
	Multitouch bool
	Panel      int32
	SizeInch   float32
}

// TableName overrides the default tablename generated by GORM
func (ScreenORM) TableName() string {
	return "screens"
}

// ToORM runs the BeforeToORM hook if present, converts the fields of this
// object to ORM format, runs the AfterToORM hook, then returns the ORM object
func (m *Screen) ToORM(ctx context.Context) (ScreenORM, error) {
	to := ScreenORM{}
	var err error
	if prehook, ok := interface{}(m).(ScreenWithBeforeToORM); ok {
		if err = prehook.BeforeToORM(ctx, &to); err != nil {
			return to, err
		}
	}
	to.SizeInch = m.SizeInch
	to.Panel = int32(m.Panel)
	to.Multitouch = m.Multitouch
	if posthook, ok := interface{}(m).(ScreenWithAfterToORM); ok {
		err = posthook.AfterToORM(ctx, &to)
	}
	return to, err
}

// ToPB runs the BeforeToPB hook if present, converts the fields of this
// object to PB format, runs the AfterToPB hook, then returns the PB object
func (m *ScreenORM) ToPB(ctx context.Context) (Screen, error) {
	to := Screen{}
	var err error
	if prehook, ok := interface{}(m).(ScreenWithBeforeToPB); ok {
		if err = prehook.BeforeToPB(ctx, &to); err != nil {
			return to, err
		}
	}
	to.SizeInch = m.SizeInch
	to.Panel = Screen_Panel(m.Panel)
	to.Multitouch = m.Multitouch
	if posthook, ok := interface{}(m).(ScreenWithAfterToPB); ok {
		err = posthook.AfterToPB(ctx, &to)
	}
	return to, err
}

// The following are interfaces you can implement for special behavior during ORM/PB conversions
// of type Screen the arg will be the target, the caller the one being converted from

// ScreenBeforeToORM called before default ToORM code
type ScreenWithBeforeToORM interface {
	BeforeToORM(context.Context, *ScreenORM) error
}

// ScreenAfterToORM called after default ToORM code
type ScreenWithAfterToORM interface {
	AfterToORM(context.Context, *ScreenORM) error
}

// ScreenBeforeToPB called before default ToPB code
type ScreenWithBeforeToPB interface {
	BeforeToPB(context.Context, *Screen) error
}

// ScreenAfterToPB called after default ToPB code
type ScreenWithAfterToPB interface {
	AfterToPB(context.Context, *Screen) error
}

// DefaultCreateScreen executes a basic gorm create call
func DefaultCreateScreen(ctx context.Context, in *Screen, db *gorm.DB) (*Screen, error) {
	if in == nil {
		return nil, errors.NilArgumentError
	}
	ormObj, err := in.ToORM(ctx)
	if err != nil {
		return nil, err
	}
	if hook, ok := interface{}(&ormObj).(ScreenORMWithBeforeCreate_); ok {
		if db, err = hook.BeforeCreate_(ctx, db); err != nil {
			return nil, err
		}
	}
	if err = db.Create(&ormObj).Error; err != nil {
		return nil, err
	}
	if hook, ok := interface{}(&ormObj).(ScreenORMWithAfterCreate_); ok {
		if err = hook.AfterCreate_(ctx, db); err != nil {
			return nil, err
		}
	}
	pbResponse, err := ormObj.ToPB(ctx)
	return &pbResponse, err
}

type ScreenORMWithBeforeCreate_ interface {
	BeforeCreate_(context.Context, *gorm.DB) (*gorm.DB, error)
}
type ScreenORMWithAfterCreate_ interface {
	AfterCreate_(context.Context, *gorm.DB) error
}

// DefaultApplyFieldMaskScreen patches an pbObject with patcher according to a field mask.
func DefaultApplyFieldMaskScreen(ctx context.Context, patchee *Screen, patcher *Screen, updateMask *field_mask.FieldMask, prefix string, db *gorm.DB) (*Screen, error) {
	if patcher == nil {
		return nil, nil
	} else if patchee == nil {
		return nil, errors.NilArgumentError
	}
	var err error
	var updatedResolution bool
	for i, f := range updateMask.Paths {
		if f == prefix+"SizeInch" {
			patchee.SizeInch = patcher.SizeInch
			continue
		}
		if !updatedResolution && strings.HasPrefix(f, prefix+"Resolution.") {
			if patcher.Resolution == nil {
				patchee.Resolution = nil
				continue
			}
			if patchee.Resolution == nil {
				patchee.Resolution = &Screen_Resolution{}
			}
			childMask := &field_mask.FieldMask{}
			for j := i; j < len(updateMask.Paths); j++ {
				if trimPath := strings.TrimPrefix(updateMask.Paths[j], prefix+"Resolution."); trimPath != updateMask.Paths[j] {
					childMask.Paths = append(childMask.Paths, trimPath)
				}
			}
			if err := gorm1.MergeWithMask(patcher.Resolution, patchee.Resolution, childMask); err != nil {
				return nil, nil
			}
		}
		if f == prefix+"Resolution" {
			updatedResolution = true
			patchee.Resolution = patcher.Resolution
			continue
		}
		if f == prefix+"Panel" {
			patchee.Panel = patcher.Panel
			continue
		}
		if f == prefix+"Multitouch" {
			patchee.Multitouch = patcher.Multitouch
			continue
		}
	}
	if err != nil {
		return nil, err
	}
	return patchee, nil
}

// DefaultListScreen executes a gorm list call
func DefaultListScreen(ctx context.Context, db *gorm.DB) ([]*Screen, error) {
	in := Screen{}
	ormObj, err := in.ToORM(ctx)
	if err != nil {
		return nil, err
	}
	if hook, ok := interface{}(&ormObj).(ScreenORMWithBeforeListApplyQuery); ok {
		if db, err = hook.BeforeListApplyQuery(ctx, db); err != nil {
			return nil, err
		}
	}
	db, err = gorm1.ApplyCollectionOperators(ctx, db, &ScreenORM{}, &Screen{}, nil, nil, nil, nil)
	if err != nil {
		return nil, err
	}
	if hook, ok := interface{}(&ormObj).(ScreenORMWithBeforeListFind); ok {
		if db, err = hook.BeforeListFind(ctx, db); err != nil {
			return nil, err
		}
	}
	db = db.Where(&ormObj)
	ormResponse := []ScreenORM{}
	if err := db.Find(&ormResponse).Error; err != nil {
		return nil, err
	}
	if hook, ok := interface{}(&ormObj).(ScreenORMWithAfterListFind); ok {
		if err = hook.AfterListFind(ctx, db, &ormResponse); err != nil {
			return nil, err
		}
	}
	pbResponse := []*Screen{}
	for _, responseEntry := range ormResponse {
		temp, err := responseEntry.ToPB(ctx)
		if err != nil {
			return nil, err
		}
		pbResponse = append(pbResponse, &temp)
	}
	return pbResponse, nil
}

type ScreenORMWithBeforeListApplyQuery interface {
	BeforeListApplyQuery(context.Context, *gorm.DB) (*gorm.DB, error)
}
type ScreenORMWithBeforeListFind interface {
	BeforeListFind(context.Context, *gorm.DB) (*gorm.DB, error)
}
type ScreenORMWithAfterListFind interface {
	AfterListFind(context.Context, *gorm.DB, *[]ScreenORM) error
}
