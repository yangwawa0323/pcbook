package pb

import (
	context "context"
	fmt "fmt"
	gorm1 "github.com/infobloxopen/atlas-app-toolkit/gorm"
	errors "github.com/infobloxopen/protoc-gen-gorm/errors"
	gorm "github.com/jinzhu/gorm"
	field_mask "google.golang.org/genproto/protobuf/field_mask"
	timestamppb "google.golang.org/protobuf/types/known/timestamppb"
	strings "strings"
	time "time"
)

type LaptopORM struct {
	Brand       string
	Cpu         *CpuORM      `gorm:"foreignkey:LaptopId;association_foreignkey:Id"`
	Gpus        []*GpuORM    `gorm:"foreignkey:LaptopId;association_foreignkey:Id"`
	Id          string       `gorm:"type:varchar(100);primary_key"`
	Keyboard    *KeyboardORM `gorm:"foreignkey:LaptopId;association_foreignkey:Id"`
	Name        string
	PriceUsd    float64
	ReleaseYear uint32
	Screen      *ScreenORM    `gorm:"foreignkey:LaptopId;association_foreignkey:Id"`
	Storages    []*StorageORM `gorm:"foreignkey:LaptopId;association_foreignkey:Id"`
	UpdatedAt   *time.Time
}

// TableName overrides the default tablename generated by GORM
func (LaptopORM) TableName() string {
	return "laptops"
}

// ToORM runs the BeforeToORM hook if present, converts the fields of this
// object to ORM format, runs the AfterToORM hook, then returns the ORM object
func (m *Laptop) ToORM(ctx context.Context) (LaptopORM, error) {
	to := LaptopORM{}
	var err error
	if prehook, ok := interface{}(m).(LaptopWithBeforeToORM); ok {
		if err = prehook.BeforeToORM(ctx, &to); err != nil {
			return to, err
		}
	}
	to.Id = m.Id
	to.Brand = m.Brand
	to.Name = m.Name
	if m.Cpu != nil {
		tempCpu, err := m.Cpu.ToORM(ctx)
		if err != nil {
			return to, err
		}
		to.Cpu = &tempCpu
	}
	for _, v := range m.Gpus {
		if v != nil {
			if tempGpus, cErr := v.ToORM(ctx); cErr == nil {
				to.Gpus = append(to.Gpus, &tempGpus)
			} else {
				return to, cErr
			}
		} else {
			to.Gpus = append(to.Gpus, nil)
		}
	}
	for _, v := range m.Storages {
		if v != nil {
			if tempStorages, cErr := v.ToORM(ctx); cErr == nil {
				to.Storages = append(to.Storages, &tempStorages)
			} else {
				return to, cErr
			}
		} else {
			to.Storages = append(to.Storages, nil)
		}
	}
	if m.Screen != nil {
		tempScreen, err := m.Screen.ToORM(ctx)
		if err != nil {
			return to, err
		}
		to.Screen = &tempScreen
	}
	if m.Keyboard != nil {
		tempKeyboard, err := m.Keyboard.ToORM(ctx)
		if err != nil {
			return to, err
		}
		to.Keyboard = &tempKeyboard
	}
	to.PriceUsd = m.PriceUsd
	to.ReleaseYear = m.ReleaseYear
	if m.UpdatedAt != nil {
		t := m.UpdatedAt.AsTime()
		to.UpdatedAt = &t
	}
	if posthook, ok := interface{}(m).(LaptopWithAfterToORM); ok {
		err = posthook.AfterToORM(ctx, &to)
	}
	return to, err
}

// ToPB runs the BeforeToPB hook if present, converts the fields of this
// object to PB format, runs the AfterToPB hook, then returns the PB object
func (m *LaptopORM) ToPB(ctx context.Context) (Laptop, error) {
	to := Laptop{}
	var err error
	if prehook, ok := interface{}(m).(LaptopWithBeforeToPB); ok {
		if err = prehook.BeforeToPB(ctx, &to); err != nil {
			return to, err
		}
	}
	to.Id = m.Id
	to.Brand = m.Brand
	to.Name = m.Name
	if m.Cpu != nil {
		tempCpu, err := m.Cpu.ToPB(ctx)
		if err != nil {
			return to, err
		}
		to.Cpu = &tempCpu
	}
	for _, v := range m.Gpus {
		if v != nil {
			if tempGpus, cErr := v.ToPB(ctx); cErr == nil {
				to.Gpus = append(to.Gpus, &tempGpus)
			} else {
				return to, cErr
			}
		} else {
			to.Gpus = append(to.Gpus, nil)
		}
	}
	for _, v := range m.Storages {
		if v != nil {
			if tempStorages, cErr := v.ToPB(ctx); cErr == nil {
				to.Storages = append(to.Storages, &tempStorages)
			} else {
				return to, cErr
			}
		} else {
			to.Storages = append(to.Storages, nil)
		}
	}
	if m.Screen != nil {
		tempScreen, err := m.Screen.ToPB(ctx)
		if err != nil {
			return to, err
		}
		to.Screen = &tempScreen
	}
	if m.Keyboard != nil {
		tempKeyboard, err := m.Keyboard.ToPB(ctx)
		if err != nil {
			return to, err
		}
		to.Keyboard = &tempKeyboard
	}
	to.PriceUsd = m.PriceUsd
	to.ReleaseYear = m.ReleaseYear
	if m.UpdatedAt != nil {
		to.UpdatedAt = timestamppb.New(*m.UpdatedAt)
	}
	if posthook, ok := interface{}(m).(LaptopWithAfterToPB); ok {
		err = posthook.AfterToPB(ctx, &to)
	}
	return to, err
}

// The following are interfaces you can implement for special behavior during ORM/PB conversions
// of type Laptop the arg will be the target, the caller the one being converted from

// LaptopBeforeToORM called before default ToORM code
type LaptopWithBeforeToORM interface {
	BeforeToORM(context.Context, *LaptopORM) error
}

// LaptopAfterToORM called after default ToORM code
type LaptopWithAfterToORM interface {
	AfterToORM(context.Context, *LaptopORM) error
}

// LaptopBeforeToPB called before default ToPB code
type LaptopWithBeforeToPB interface {
	BeforeToPB(context.Context, *Laptop) error
}

// LaptopAfterToPB called after default ToPB code
type LaptopWithAfterToPB interface {
	AfterToPB(context.Context, *Laptop) error
}

// DefaultCreateLaptop executes a basic gorm create call
func DefaultCreateLaptop(ctx context.Context, in *Laptop, db *gorm.DB) (*Laptop, error) {
	if in == nil {
		return nil, errors.NilArgumentError
	}
	ormObj, err := in.ToORM(ctx)
	if err != nil {
		return nil, err
	}
	if hook, ok := interface{}(&ormObj).(LaptopORMWithBeforeCreate_); ok {
		if db, err = hook.BeforeCreate_(ctx, db); err != nil {
			return nil, err
		}
	}
	if err = db.Create(&ormObj).Error; err != nil {
		return nil, err
	}
	if hook, ok := interface{}(&ormObj).(LaptopORMWithAfterCreate_); ok {
		if err = hook.AfterCreate_(ctx, db); err != nil {
			return nil, err
		}
	}
	pbResponse, err := ormObj.ToPB(ctx)
	return &pbResponse, err
}

type LaptopORMWithBeforeCreate_ interface {
	BeforeCreate_(context.Context, *gorm.DB) (*gorm.DB, error)
}
type LaptopORMWithAfterCreate_ interface {
	AfterCreate_(context.Context, *gorm.DB) error
}

func DefaultReadLaptop(ctx context.Context, in *Laptop, db *gorm.DB) (*Laptop, error) {
	if in == nil {
		return nil, errors.NilArgumentError
	}
	ormObj, err := in.ToORM(ctx)
	if err != nil {
		return nil, err
	}
	if ormObj.Id == "" {
		return nil, errors.EmptyIdError
	}
	if hook, ok := interface{}(&ormObj).(LaptopORMWithBeforeReadApplyQuery); ok {
		if db, err = hook.BeforeReadApplyQuery(ctx, db); err != nil {
			return nil, err
		}
	}
	if db, err = gorm1.ApplyFieldSelection(ctx, db, nil, &LaptopORM{}); err != nil {
		return nil, err
	}
	if hook, ok := interface{}(&ormObj).(LaptopORMWithBeforeReadFind); ok {
		if db, err = hook.BeforeReadFind(ctx, db); err != nil {
			return nil, err
		}
	}
	ormResponse := LaptopORM{}
	if err = db.Where(&ormObj).First(&ormResponse).Error; err != nil {
		return nil, err
	}
	if hook, ok := interface{}(&ormResponse).(LaptopORMWithAfterReadFind); ok {
		if err = hook.AfterReadFind(ctx, db); err != nil {
			return nil, err
		}
	}
	pbResponse, err := ormResponse.ToPB(ctx)
	return &pbResponse, err
}

type LaptopORMWithBeforeReadApplyQuery interface {
	BeforeReadApplyQuery(context.Context, *gorm.DB) (*gorm.DB, error)
}
type LaptopORMWithBeforeReadFind interface {
	BeforeReadFind(context.Context, *gorm.DB) (*gorm.DB, error)
}
type LaptopORMWithAfterReadFind interface {
	AfterReadFind(context.Context, *gorm.DB) error
}

func DefaultDeleteLaptop(ctx context.Context, in *Laptop, db *gorm.DB) error {
	if in == nil {
		return errors.NilArgumentError
	}
	ormObj, err := in.ToORM(ctx)
	if err != nil {
		return err
	}
	if ormObj.Id == "" {
		return errors.EmptyIdError
	}
	if hook, ok := interface{}(&ormObj).(LaptopORMWithBeforeDelete_); ok {
		if db, err = hook.BeforeDelete_(ctx, db); err != nil {
			return err
		}
	}
	err = db.Where(&ormObj).Delete(&LaptopORM{}).Error
	if err != nil {
		return err
	}
	if hook, ok := interface{}(&ormObj).(LaptopORMWithAfterDelete_); ok {
		err = hook.AfterDelete_(ctx, db)
	}
	return err
}

type LaptopORMWithBeforeDelete_ interface {
	BeforeDelete_(context.Context, *gorm.DB) (*gorm.DB, error)
}
type LaptopORMWithAfterDelete_ interface {
	AfterDelete_(context.Context, *gorm.DB) error
}

func DefaultDeleteLaptopSet(ctx context.Context, in []*Laptop, db *gorm.DB) error {
	if in == nil {
		return errors.NilArgumentError
	}
	var err error
	keys := []string{}
	for _, obj := range in {
		ormObj, err := obj.ToORM(ctx)
		if err != nil {
			return err
		}
		if ormObj.Id == "" {
			return errors.EmptyIdError
		}
		keys = append(keys, ormObj.Id)
	}
	if hook, ok := (interface{}(&LaptopORM{})).(LaptopORMWithBeforeDeleteSet); ok {
		if db, err = hook.BeforeDeleteSet(ctx, in, db); err != nil {
			return err
		}
	}
	err = db.Where("id in (?)", keys).Delete(&LaptopORM{}).Error
	if err != nil {
		return err
	}
	if hook, ok := (interface{}(&LaptopORM{})).(LaptopORMWithAfterDeleteSet); ok {
		err = hook.AfterDeleteSet(ctx, in, db)
	}
	return err
}

type LaptopORMWithBeforeDeleteSet interface {
	BeforeDeleteSet(context.Context, []*Laptop, *gorm.DB) (*gorm.DB, error)
}
type LaptopORMWithAfterDeleteSet interface {
	AfterDeleteSet(context.Context, []*Laptop, *gorm.DB) error
}

// DefaultStrictUpdateLaptop clears / replaces / appends first level 1:many children and then executes a gorm update call
func DefaultStrictUpdateLaptop(ctx context.Context, in *Laptop, db *gorm.DB) (*Laptop, error) {
	if in == nil {
		return nil, fmt.Errorf("Nil argument to DefaultStrictUpdateLaptop")
	}
	ormObj, err := in.ToORM(ctx)
	if err != nil {
		return nil, err
	}
	lockedRow := &LaptopORM{}
	db.Model(&ormObj).Set("gorm:query_option", "FOR UPDATE").Where("id=?", ormObj.Id).First(lockedRow)
	if hook, ok := interface{}(&ormObj).(LaptopORMWithBeforeStrictUpdateCleanup); ok {
		if db, err = hook.BeforeStrictUpdateCleanup(ctx, db); err != nil {
			return nil, err
		}
	}
	filterCpu := CpuORM{}
	if ormObj.Id == "" {
		return nil, errors.EmptyIdError
	}
	filterCpu.LaptopId = new(string)
	*filterCpu.LaptopId = ormObj.Id
	if err = db.Where(filterCpu).Delete(CpuORM{}).Error; err != nil {
		return nil, err
	}
	filterGpus := GpuORM{}
	if ormObj.Id == "" {
		return nil, errors.EmptyIdError
	}
	filterGpus.LaptopId = new(string)
	*filterGpus.LaptopId = ormObj.Id
	if err = db.Where(filterGpus).Delete(GpuORM{}).Error; err != nil {
		return nil, err
	}
	filterKeyboard := KeyboardORM{}
	if ormObj.Id == "" {
		return nil, errors.EmptyIdError
	}
	filterKeyboard.LaptopId = new(string)
	*filterKeyboard.LaptopId = ormObj.Id
	if err = db.Where(filterKeyboard).Delete(KeyboardORM{}).Error; err != nil {
		return nil, err
	}
	filterScreen := ScreenORM{}
	if ormObj.Id == "" {
		return nil, errors.EmptyIdError
	}
	filterScreen.LaptopId = new(string)
	*filterScreen.LaptopId = ormObj.Id
	if err = db.Where(filterScreen).Delete(ScreenORM{}).Error; err != nil {
		return nil, err
	}
	filterStorages := StorageORM{}
	if ormObj.Id == "" {
		return nil, errors.EmptyIdError
	}
	filterStorages.LaptopId = new(string)
	*filterStorages.LaptopId = ormObj.Id
	if err = db.Where(filterStorages).Delete(StorageORM{}).Error; err != nil {
		return nil, err
	}
	if hook, ok := interface{}(&ormObj).(LaptopORMWithBeforeStrictUpdateSave); ok {
		if db, err = hook.BeforeStrictUpdateSave(ctx, db); err != nil {
			return nil, err
		}
	}
	if err = db.Save(&ormObj).Error; err != nil {
		return nil, err
	}
	if hook, ok := interface{}(&ormObj).(LaptopORMWithAfterStrictUpdateSave); ok {
		if err = hook.AfterStrictUpdateSave(ctx, db); err != nil {
			return nil, err
		}
	}
	pbResponse, err := ormObj.ToPB(ctx)
	if err != nil {
		return nil, err
	}
	return &pbResponse, err
}

type LaptopORMWithBeforeStrictUpdateCleanup interface {
	BeforeStrictUpdateCleanup(context.Context, *gorm.DB) (*gorm.DB, error)
}
type LaptopORMWithBeforeStrictUpdateSave interface {
	BeforeStrictUpdateSave(context.Context, *gorm.DB) (*gorm.DB, error)
}
type LaptopORMWithAfterStrictUpdateSave interface {
	AfterStrictUpdateSave(context.Context, *gorm.DB) error
}

// DefaultPatchLaptop executes a basic gorm update call with patch behavior
func DefaultPatchLaptop(ctx context.Context, in *Laptop, updateMask *field_mask.FieldMask, db *gorm.DB) (*Laptop, error) {
	if in == nil {
		return nil, errors.NilArgumentError
	}
	var pbObj Laptop
	var err error
	if hook, ok := interface{}(&pbObj).(LaptopWithBeforePatchRead); ok {
		if db, err = hook.BeforePatchRead(ctx, in, updateMask, db); err != nil {
			return nil, err
		}
	}
	pbReadRes, err := DefaultReadLaptop(ctx, &Laptop{Id: in.GetId()}, db)
	if err != nil {
		return nil, err
	}
	pbObj = *pbReadRes
	if hook, ok := interface{}(&pbObj).(LaptopWithBeforePatchApplyFieldMask); ok {
		if db, err = hook.BeforePatchApplyFieldMask(ctx, in, updateMask, db); err != nil {
			return nil, err
		}
	}
	if _, err := DefaultApplyFieldMaskLaptop(ctx, &pbObj, in, updateMask, "", db); err != nil {
		return nil, err
	}
	if hook, ok := interface{}(&pbObj).(LaptopWithBeforePatchSave); ok {
		if db, err = hook.BeforePatchSave(ctx, in, updateMask, db); err != nil {
			return nil, err
		}
	}
	pbResponse, err := DefaultStrictUpdateLaptop(ctx, &pbObj, db)
	if err != nil {
		return nil, err
	}
	if hook, ok := interface{}(pbResponse).(LaptopWithAfterPatchSave); ok {
		if err = hook.AfterPatchSave(ctx, in, updateMask, db); err != nil {
			return nil, err
		}
	}
	return pbResponse, nil
}

type LaptopWithBeforePatchRead interface {
	BeforePatchRead(context.Context, *Laptop, *field_mask.FieldMask, *gorm.DB) (*gorm.DB, error)
}
type LaptopWithBeforePatchApplyFieldMask interface {
	BeforePatchApplyFieldMask(context.Context, *Laptop, *field_mask.FieldMask, *gorm.DB) (*gorm.DB, error)
}
type LaptopWithBeforePatchSave interface {
	BeforePatchSave(context.Context, *Laptop, *field_mask.FieldMask, *gorm.DB) (*gorm.DB, error)
}
type LaptopWithAfterPatchSave interface {
	AfterPatchSave(context.Context, *Laptop, *field_mask.FieldMask, *gorm.DB) error
}

// DefaultPatchSetLaptop executes a bulk gorm update call with patch behavior
func DefaultPatchSetLaptop(ctx context.Context, objects []*Laptop, updateMasks []*field_mask.FieldMask, db *gorm.DB) ([]*Laptop, error) {
	if len(objects) != len(updateMasks) {
		return nil, fmt.Errorf(errors.BadRepeatedFieldMaskTpl, len(updateMasks), len(objects))
	}

	results := make([]*Laptop, 0, len(objects))
	for i, patcher := range objects {
		pbResponse, err := DefaultPatchLaptop(ctx, patcher, updateMasks[i], db)
		if err != nil {
			return nil, err
		}

		results = append(results, pbResponse)
	}

	return results, nil
}

// DefaultApplyFieldMaskLaptop patches an pbObject with patcher according to a field mask.
func DefaultApplyFieldMaskLaptop(ctx context.Context, patchee *Laptop, patcher *Laptop, updateMask *field_mask.FieldMask, prefix string, db *gorm.DB) (*Laptop, error) {
	if patcher == nil {
		return nil, nil
	} else if patchee == nil {
		return nil, errors.NilArgumentError
	}
	var err error
	var updatedCpu bool
	var updatedRam bool
	var updatedScreen bool
	var updatedKeyboard bool
	var updatedUpdatedAt bool
	for i, f := range updateMask.Paths {
		if f == prefix+"Id" {
			patchee.Id = patcher.Id
			continue
		}
		if f == prefix+"Brand" {
			patchee.Brand = patcher.Brand
			continue
		}
		if f == prefix+"Name" {
			patchee.Name = patcher.Name
			continue
		}
		if !updatedCpu && strings.HasPrefix(f, prefix+"Cpu.") {
			updatedCpu = true
			if patcher.Cpu == nil {
				patchee.Cpu = nil
				continue
			}
			if patchee.Cpu == nil {
				patchee.Cpu = &Cpu{}
			}
			if o, err := DefaultApplyFieldMaskCpu(ctx, patchee.Cpu, patcher.Cpu, &field_mask.FieldMask{Paths: updateMask.Paths[i:]}, prefix+"Cpu.", db); err != nil {
				return nil, err
			} else {
				patchee.Cpu = o
			}
			continue
		}
		if f == prefix+"Cpu" {
			updatedCpu = true
			patchee.Cpu = patcher.Cpu
			continue
		}
		if !updatedRam && strings.HasPrefix(f, prefix+"Ram.") {
			if patcher.Ram == nil {
				patchee.Ram = nil
				continue
			}
			if patchee.Ram == nil {
				patchee.Ram = &Memory{}
			}
			childMask := &field_mask.FieldMask{}
			for j := i; j < len(updateMask.Paths); j++ {
				if trimPath := strings.TrimPrefix(updateMask.Paths[j], prefix+"Ram."); trimPath != updateMask.Paths[j] {
					childMask.Paths = append(childMask.Paths, trimPath)
				}
			}
			if err := gorm1.MergeWithMask(patcher.Ram, patchee.Ram, childMask); err != nil {
				return nil, nil
			}
		}
		if f == prefix+"Ram" {
			updatedRam = true
			patchee.Ram = patcher.Ram
			continue
		}
		if f == prefix+"Gpus" {
			patchee.Gpus = patcher.Gpus
			continue
		}
		if f == prefix+"Storages" {
			patchee.Storages = patcher.Storages
			continue
		}
		if !updatedScreen && strings.HasPrefix(f, prefix+"Screen.") {
			updatedScreen = true
			if patcher.Screen == nil {
				patchee.Screen = nil
				continue
			}
			if patchee.Screen == nil {
				patchee.Screen = &Screen{}
			}
			if o, err := DefaultApplyFieldMaskScreen(ctx, patchee.Screen, patcher.Screen, &field_mask.FieldMask{Paths: updateMask.Paths[i:]}, prefix+"Screen.", db); err != nil {
				return nil, err
			} else {
				patchee.Screen = o
			}
			continue
		}
		if f == prefix+"Screen" {
			updatedScreen = true
			patchee.Screen = patcher.Screen
			continue
		}
		if !updatedKeyboard && strings.HasPrefix(f, prefix+"Keyboard.") {
			updatedKeyboard = true
			if patcher.Keyboard == nil {
				patchee.Keyboard = nil
				continue
			}
			if patchee.Keyboard == nil {
				patchee.Keyboard = &Keyboard{}
			}
			if o, err := DefaultApplyFieldMaskKeyboard(ctx, patchee.Keyboard, patcher.Keyboard, &field_mask.FieldMask{Paths: updateMask.Paths[i:]}, prefix+"Keyboard.", db); err != nil {
				return nil, err
			} else {
				patchee.Keyboard = o
			}
			continue
		}
		if f == prefix+"Keyboard" {
			updatedKeyboard = true
			patchee.Keyboard = patcher.Keyboard
			continue
		}
		if f == prefix+"PriceUsd" {
			patchee.PriceUsd = patcher.PriceUsd
			continue
		}
		if f == prefix+"ReleaseYear" {
			patchee.ReleaseYear = patcher.ReleaseYear
			continue
		}
		if !updatedUpdatedAt && strings.HasPrefix(f, prefix+"UpdatedAt.") {
			if patcher.UpdatedAt == nil {
				patchee.UpdatedAt = nil
				continue
			}
			if patchee.UpdatedAt == nil {
				patchee.UpdatedAt = &timestamppb.Timestamp{}
			}
			childMask := &field_mask.FieldMask{}
			for j := i; j < len(updateMask.Paths); j++ {
				if trimPath := strings.TrimPrefix(updateMask.Paths[j], prefix+"UpdatedAt."); trimPath != updateMask.Paths[j] {
					childMask.Paths = append(childMask.Paths, trimPath)
				}
			}
			if err := gorm1.MergeWithMask(patcher.UpdatedAt, patchee.UpdatedAt, childMask); err != nil {
				return nil, nil
			}
		}
		if f == prefix+"UpdatedAt" {
			updatedUpdatedAt = true
			patchee.UpdatedAt = patcher.UpdatedAt
			continue
		}
	}
	if err != nil {
		return nil, err
	}
	return patchee, nil
}

// DefaultListLaptop executes a gorm list call
func DefaultListLaptop(ctx context.Context, db *gorm.DB) ([]*Laptop, error) {
	in := Laptop{}
	ormObj, err := in.ToORM(ctx)
	if err != nil {
		return nil, err
	}
	if hook, ok := interface{}(&ormObj).(LaptopORMWithBeforeListApplyQuery); ok {
		if db, err = hook.BeforeListApplyQuery(ctx, db); err != nil {
			return nil, err
		}
	}
	db, err = gorm1.ApplyCollectionOperators(ctx, db, &LaptopORM{}, &Laptop{}, nil, nil, nil, nil)
	if err != nil {
		return nil, err
	}
	if hook, ok := interface{}(&ormObj).(LaptopORMWithBeforeListFind); ok {
		if db, err = hook.BeforeListFind(ctx, db); err != nil {
			return nil, err
		}
	}
	db = db.Where(&ormObj)
	db = db.Order("id")
	ormResponse := []LaptopORM{}
	if err := db.Find(&ormResponse).Error; err != nil {
		return nil, err
	}
	if hook, ok := interface{}(&ormObj).(LaptopORMWithAfterListFind); ok {
		if err = hook.AfterListFind(ctx, db, &ormResponse); err != nil {
			return nil, err
		}
	}
	pbResponse := []*Laptop{}
	for _, responseEntry := range ormResponse {
		temp, err := responseEntry.ToPB(ctx)
		if err != nil {
			return nil, err
		}
		pbResponse = append(pbResponse, &temp)
	}
	return pbResponse, nil
}

type LaptopORMWithBeforeListApplyQuery interface {
	BeforeListApplyQuery(context.Context, *gorm.DB) (*gorm.DB, error)
}
type LaptopORMWithBeforeListFind interface {
	BeforeListFind(context.Context, *gorm.DB) (*gorm.DB, error)
}
type LaptopORMWithAfterListFind interface {
	AfterListFind(context.Context, *gorm.DB, *[]LaptopORM) error
}
