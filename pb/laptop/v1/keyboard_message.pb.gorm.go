package pb

import (
	context "context"
	gorm1 "github.com/infobloxopen/atlas-app-toolkit/gorm"
	errors "github.com/infobloxopen/protoc-gen-gorm/errors"
	gorm "github.com/jinzhu/gorm"
	field_mask "google.golang.org/genproto/protobuf/field_mask"
)

type KeyboardORM struct {
	Backlit  bool
	LaptopId *string
	Layout   int32
}

// TableName overrides the default tablename generated by GORM
func (KeyboardORM) TableName() string {
	return "keyboards"
}

// ToORM runs the BeforeToORM hook if present, converts the fields of this
// object to ORM format, runs the AfterToORM hook, then returns the ORM object
func (m *Keyboard) ToORM(ctx context.Context) (KeyboardORM, error) {
	to := KeyboardORM{}
	var err error
	if prehook, ok := interface{}(m).(KeyboardWithBeforeToORM); ok {
		if err = prehook.BeforeToORM(ctx, &to); err != nil {
			return to, err
		}
	}
	to.Layout = int32(m.Layout)
	to.Backlit = m.Backlit
	if posthook, ok := interface{}(m).(KeyboardWithAfterToORM); ok {
		err = posthook.AfterToORM(ctx, &to)
	}
	return to, err
}

// ToPB runs the BeforeToPB hook if present, converts the fields of this
// object to PB format, runs the AfterToPB hook, then returns the PB object
func (m *KeyboardORM) ToPB(ctx context.Context) (Keyboard, error) {
	to := Keyboard{}
	var err error
	if prehook, ok := interface{}(m).(KeyboardWithBeforeToPB); ok {
		if err = prehook.BeforeToPB(ctx, &to); err != nil {
			return to, err
		}
	}
	to.Layout = Keyboard_Layout(m.Layout)
	to.Backlit = m.Backlit
	if posthook, ok := interface{}(m).(KeyboardWithAfterToPB); ok {
		err = posthook.AfterToPB(ctx, &to)
	}
	return to, err
}

// The following are interfaces you can implement for special behavior during ORM/PB conversions
// of type Keyboard the arg will be the target, the caller the one being converted from

// KeyboardBeforeToORM called before default ToORM code
type KeyboardWithBeforeToORM interface {
	BeforeToORM(context.Context, *KeyboardORM) error
}

// KeyboardAfterToORM called after default ToORM code
type KeyboardWithAfterToORM interface {
	AfterToORM(context.Context, *KeyboardORM) error
}

// KeyboardBeforeToPB called before default ToPB code
type KeyboardWithBeforeToPB interface {
	BeforeToPB(context.Context, *Keyboard) error
}

// KeyboardAfterToPB called after default ToPB code
type KeyboardWithAfterToPB interface {
	AfterToPB(context.Context, *Keyboard) error
}

// DefaultCreateKeyboard executes a basic gorm create call
func DefaultCreateKeyboard(ctx context.Context, in *Keyboard, db *gorm.DB) (*Keyboard, error) {
	if in == nil {
		return nil, errors.NilArgumentError
	}
	ormObj, err := in.ToORM(ctx)
	if err != nil {
		return nil, err
	}
	if hook, ok := interface{}(&ormObj).(KeyboardORMWithBeforeCreate_); ok {
		if db, err = hook.BeforeCreate_(ctx, db); err != nil {
			return nil, err
		}
	}
	if err = db.Create(&ormObj).Error; err != nil {
		return nil, err
	}
	if hook, ok := interface{}(&ormObj).(KeyboardORMWithAfterCreate_); ok {
		if err = hook.AfterCreate_(ctx, db); err != nil {
			return nil, err
		}
	}
	pbResponse, err := ormObj.ToPB(ctx)
	return &pbResponse, err
}

type KeyboardORMWithBeforeCreate_ interface {
	BeforeCreate_(context.Context, *gorm.DB) (*gorm.DB, error)
}
type KeyboardORMWithAfterCreate_ interface {
	AfterCreate_(context.Context, *gorm.DB) error
}

// DefaultApplyFieldMaskKeyboard patches an pbObject with patcher according to a field mask.
func DefaultApplyFieldMaskKeyboard(ctx context.Context, patchee *Keyboard, patcher *Keyboard, updateMask *field_mask.FieldMask, prefix string, db *gorm.DB) (*Keyboard, error) {
	if patcher == nil {
		return nil, nil
	} else if patchee == nil {
		return nil, errors.NilArgumentError
	}
	var err error
	for _, f := range updateMask.Paths {
		if f == prefix+"Layout" {
			patchee.Layout = patcher.Layout
			continue
		}
		if f == prefix+"Backlit" {
			patchee.Backlit = patcher.Backlit
			continue
		}
	}
	if err != nil {
		return nil, err
	}
	return patchee, nil
}

// DefaultListKeyboard executes a gorm list call
func DefaultListKeyboard(ctx context.Context, db *gorm.DB) ([]*Keyboard, error) {
	in := Keyboard{}
	ormObj, err := in.ToORM(ctx)
	if err != nil {
		return nil, err
	}
	if hook, ok := interface{}(&ormObj).(KeyboardORMWithBeforeListApplyQuery); ok {
		if db, err = hook.BeforeListApplyQuery(ctx, db); err != nil {
			return nil, err
		}
	}
	db, err = gorm1.ApplyCollectionOperators(ctx, db, &KeyboardORM{}, &Keyboard{}, nil, nil, nil, nil)
	if err != nil {
		return nil, err
	}
	if hook, ok := interface{}(&ormObj).(KeyboardORMWithBeforeListFind); ok {
		if db, err = hook.BeforeListFind(ctx, db); err != nil {
			return nil, err
		}
	}
	db = db.Where(&ormObj)
	ormResponse := []KeyboardORM{}
	if err := db.Find(&ormResponse).Error; err != nil {
		return nil, err
	}
	if hook, ok := interface{}(&ormObj).(KeyboardORMWithAfterListFind); ok {
		if err = hook.AfterListFind(ctx, db, &ormResponse); err != nil {
			return nil, err
		}
	}
	pbResponse := []*Keyboard{}
	for _, responseEntry := range ormResponse {
		temp, err := responseEntry.ToPB(ctx)
		if err != nil {
			return nil, err
		}
		pbResponse = append(pbResponse, &temp)
	}
	return pbResponse, nil
}

type KeyboardORMWithBeforeListApplyQuery interface {
	BeforeListApplyQuery(context.Context, *gorm.DB) (*gorm.DB, error)
}
type KeyboardORMWithBeforeListFind interface {
	BeforeListFind(context.Context, *gorm.DB) (*gorm.DB, error)
}
type KeyboardORMWithAfterListFind interface {
	AfterListFind(context.Context, *gorm.DB, *[]KeyboardORM) error
}
